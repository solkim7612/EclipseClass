/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.94
 * Generated at: 2024-10-01 08:51:20 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.List;
import blindWeb.Comments;
import blindWeb.Post;

public final class post_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(4);
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("blindWeb.Post");
    _jspx_imports_classes.add("blindWeb.Comments");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>post</title>\r\n");
      out.write("<link rel=\"stylesheet\" href=\"/blindWeb/css/index.css\">\r\n");
      out.write("<link rel=\"stylesheet\" href=\"/blindWeb/css/post.css\">\r\n");
      out.write("<link href=\"https://fonts.googleapis.com/css2?family=Noto+Sans+KR:wght@400;700&display=swap\" rel=\"stylesheet\">\r\n");
      out.write("\r\n");
      out.write("<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.7.0/jquery.min.js\"></script>\r\n");
      out.write("<script>\r\n");
      out.write("function regReview() {\r\n");
      out.write("    // 댓글 입력 필드에서 값 가져오기\r\n");
      out.write("    let review = $(\"#review\").val();\r\n");
      out.write("    \r\n");
      out.write("    // 현재 날짜 생성\r\n");
      out.write("    let currentDate = new Date().toLocaleString(); // 포맷을 원하는 형식으로 조정할 수 있습니다.\r\n");
      out.write("\r\n");
      out.write("    // Ajax를 통해 댓글 등록하는 코드\r\n");
      out.write("    let dataValue = {userId: \"********\", postUserCompany: \"**회사\", postDate: currentDate, postContents: review};\r\n");
      out.write("    \r\n");
      out.write("    $.ajax({\r\n");
      out.write("        type: \"post\",\r\n");
      out.write("        url: \"/blindWeb/post\",\r\n");
      out.write("        data: dataValue,\r\n");
      out.write("        success: function (data) {\r\n");
      out.write("            console.log(data); // 서버에서 응답받은 데이터 확인\r\n");
      out.write("\r\n");
      out.write("            // 새로운 댓글을 ul에 <li>로 추가\r\n");
      out.write("            let newComment = `\r\n");
      out.write("                <li>\r\n");
      out.write("                    <div>\r\n");
      out.write("                        <strong>${data.postUserCompany}</strong>  ${data.userId}<br>\r\n");
      out.write("                        ${data.postContents}<br> \r\n");
      out.write("                        <em>${data.postDate}</em>\r\n");
      out.write("                    </div>\r\n");
      out.write("                    <div class=\"buttonContainer\">\r\n");
      out.write("                    <button class=\"editCommentBTN\">수정하기</button>\r\n");
      out.write("                    <button class=\"deleteCommentBTN\">삭제하기</button>\r\n");
      out.write("                	</div>\r\n");
      out.write("                </li>\r\n");
      out.write("            `;\r\n");
      out.write("            \r\n");
      out.write("            // commentsList 아래에 새로운 댓글 추가\r\n");
      out.write("            $(\"#commentsList\").append(newComment);\r\n");
      out.write("\r\n");
      out.write("            // 댓글 입력란 초기화\r\n");
      out.write("            $(\"#review\").val(\"\");\r\n");
      out.write("\r\n");
      out.write("            alert(\"댓글이 등록되었습니다.\");\r\n");
      out.write("        },\r\n");
      out.write("        error: function (error) {\r\n");
      out.write("            console.log(error);\r\n");
      out.write("            alert(\"댓글 등록에 실패했습니다.\");\r\n");
      out.write("        }\r\n");
      out.write("    });\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("$(document).ready(function() {\r\n");
      out.write("	// 수정 버튼 이벤트\r\n");
      out.write("	$(document).on('click', '.editCommentBTN', function() {\r\n");
      out.write("	    const commentDiv = $(this).closest('li').find('div:first');\r\n");
      out.write("	    const currentContent = commentDiv.html().split('<br>')[1].trim(); // 현재 댓글 내용 가져오기\r\n");
      out.write("\r\n");
      out.write("	    const updatedContent = prompt(\"댓글을 수정하세요:\", currentContent);\r\n");
      out.write("\r\n");
      out.write("	    if (updatedContent !== null && updatedContent.trim() !== \"\") {\r\n");
      out.write("	        // 업데이트된 내용으로 댓글 내용 변경\r\n");
      out.write("	        const newContent = `\r\n");
      out.write("	            <strong>");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${commentDiv.find('strong').text()}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("</strong>  ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${commentDiv.find('em').text().split('<br>')[0]}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("<br>\r\n");
      out.write("	            ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${updatedContent}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("<br> \r\n");
      out.write("	            <em>");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${commentDiv.find('em').text()}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("</em>\r\n");
      out.write("	        `;\r\n");
      out.write("\r\n");
      out.write("	        commentDiv.html(newContent); // 댓글 내용 업데이트\r\n");
      out.write("	        alert(\"댓글이 수정되었습니다.\");\r\n");
      out.write("	    }\r\n");
      out.write("	});\r\n");
      out.write("\r\n");
      out.write("    // 삭제 버튼 이벤트\r\n");
      out.write("    $(document).on('click', '.deleteCommentBTN', function() {\r\n");
      out.write("        if (confirm(\"이 댓글을 삭제하시겠습니까?\")) {\r\n");
      out.write("            $(this).closest('li').remove(); // 댓글 삭제\r\n");
      out.write("            alert(\"댓글이 삭제되었습니다.\");\r\n");
      out.write("        }\r\n");
      out.write("    });\r\n");
      out.write("});\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("<header>\r\n");
      out.write("\r\n");
      out.write("    <div class=\"header_top\">\r\n");
      out.write("        <b>블라인드</b> 기업서비스 <b> > </b>\r\n");
      out.write("    </div>\r\n");
      out.write("    \r\n");
      out.write("    <div class=\"header_bottom\">\r\n");
      out.write("    	<span class=\"header_bottom_logo\"> \r\n");
      out.write("    		<a href=\"");
      out.print( request.getContextPath() );
      out.write("/index\" style=\"text-decoration: none;\">blind</a> \r\n");
      out.write("    		<sup>TOPIC</sup> \r\n");
      out.write("    	</span>\r\n");
      out.write("    	<ul class=\"header_bottom_menu\">\r\n");
      out.write("    		<li>\r\n");
      out.write("    			<a href=\"");
      out.print( request.getContextPath() );
      out.write("/index\" style=\"text-decoration: none;\" class=\"home\">홈</a>\r\n");
      out.write("    		</li>\r\n");
      out.write("		    <li>기업 리뷰</li>\r\n");
      out.write("		    <li>채용공고<sup class=\"menu_sup\">blind Hire</sup></li>\r\n");
      out.write("    	</ul>\r\n");
      out.write("	    <div class=\"header_bottom_button\">\r\n");
      out.write("	    	<button type=\"button\" class=\"wrt_btn\">글쓰기</button>\r\n");
      out.write("	        <button type=\"button\" class=\"log_btn\">로그인</button>\r\n");
      out.write("	    </div>\r\n");
      out.write("    </div>\r\n");
      out.write("    \r\n");
      out.write("</header>\r\n");
      out.write("\r\n");

   Post post = (Post)request.getAttribute("post");
   List<Comments> commentsList = (List<Comments>) request.getAttribute("comments");

      out.write("\r\n");
      out.write("\r\n");
      out.write("<main>\r\n");
      out.write("    <img class=\"main_banner\" alt=\"광고사진\" src=\"/blindWeb/img/15940192125655449145.jpg\" >\r\n");
      out.write("    \r\n");
      out.write("    <section class=\"main_post\">\r\n");
      out.write("    	<div class=\"main_post_header\">\r\n");
      out.write("    		<h5>토픽베스트 > </h5>\r\n");
      out.write("    		<h1>");
      out.print( post.getPostTitle() );
      out.write("</h1>\r\n");
      out.write("    		<div class=\"UserInfo\">\r\n");
      out.write("    			<p>");
      out.print( post.getPostUserCompany() );
      out.write("</p>\r\n");
      out.write("    			<p>");
      out.print( post.getUserId() );
      out.write("</p>\r\n");
      out.write("    		</div>\r\n");
      out.write("    		<p>");
      out.print( post.getPostDate() );
      out.write("</p> <!-- Date 형식 확인 필요 -->\r\n");
      out.write("    	</div>\r\n");
      out.write("    	\r\n");
      out.write("    	<div class=\"main_post_main\">\r\n");
      out.write("	    	<div class=\"main_post_main_content\">\r\n");
      out.write("	    		 ");
      out.print( post.getPostContents() );
      out.write("\r\n");
      out.write("	    	</div>\r\n");
      out.write("	    	<div class=\"main_post_main_URL\">\r\n");
      out.write("		    	<img alt=\"\" src=\"/blindWeb/img/free-icon-kakao-talk-3669973.png\">\r\n");
      out.write("		    	<img alt=\"\" src=\"/blindWeb/img/free-icon-facebook-145802.png\">\r\n");
      out.write("		    	<img alt=\"\" src=\"/blindWeb/img/free-icon-twitter-3670151.png\">\r\n");
      out.write("		    	<img alt=\"\" src=\"/blindWeb/img/images.png\">\r\n");
      out.write("		    	<img alt=\"\" src=\"/blindWeb/img/images (1).png\">\r\n");
      out.write("	    	</div>\r\n");
      out.write("    	</div>\r\n");
      out.write("    	\r\n");
      out.write("    	<div class=\"main_post_footer\">\r\n");
      out.write("    		<div class=\"main_post_footer_OnlyApp\">\r\n");
      out.write("    			<input type=\"text\" placeholder=\"댓글을 남겨주세요.\" id=\"review\">\r\n");
      out.write("    			<button class=\"wrt_btn\" onclick=\"regReview()\">등록하기</button>\r\n");
      out.write("    		</div>\r\n");
      out.write("    		<div class=\"main_post_footer_replyContent\">\r\n");
      out.write("		    <h3>댓글 목록</h3>\r\n");
      out.write("		    <ul id=\"commentsList\"> \r\n");
      out.write("			    ");
 
			        if (commentsList != null && !commentsList.isEmpty()) {
			    
      out.write("\r\n");
      out.write("			        ");
 for (Comments comment : commentsList) { 
      out.write("\r\n");
      out.write("			        <li>\r\n");
      out.write("			            <div>\r\n");
      out.write("			                <strong>");
      out.print( comment.getCommentsUserCompany() );
      out.write("</strong> ");
      out.print( comment.getUserId() );
      out.write(" <br>\r\n");
      out.write("			                ");
      out.print( comment.getCommentsContents() );
      out.write("<br>\r\n");
      out.write("			                <em>");
      out.print( comment.getFormattedCommentsDate() );
      out.write("</em>\r\n");
      out.write("			            </div>\r\n");
      out.write("			        </li>\r\n");
      out.write("			        ");
 } 
      out.write("\r\n");
      out.write("			    ");
 
			        } else { 
			    
      out.write("\r\n");
      out.write("			        <p>현재 등록된 댓글이 없습니다. 첫 번째 댓글을 작성해보세요!</p>\r\n");
      out.write("			    ");
 
			        } 
			    
      out.write("\r\n");
      out.write("			</ul>\r\n");
      out.write("			</div>\r\n");
      out.write("    	</div>\r\n");
      out.write("    </section>\r\n");
      out.write("</main>\r\n");
      out.write("\r\n");
      out.write("<footer>\r\n");
      out.write("    <div class=\"footer_top\">\r\n");
      out.write("    \r\n");
      out.write("        <ul class=\"footer_top_menu\">\r\n");
      out.write("            <li>서비스 소개</li>\r\n");
      out.write("            <li>이용약관</li>\r\n");
      out.write("            <li>디렉토리</li>\r\n");
      out.write("            <li>개인정보 처리방침</li>\r\n");
      out.write("            <li>인재채용</li>\r\n");
      out.write("            <li>블라인드 기업서비스</li>\r\n");
      out.write("            <li>신고가이드</li>\r\n");
      out.write("        </ul>\r\n");
      out.write("        \r\n");
      out.write("        <div class=\"footer_top_botton\">\r\n");
      out.write("            <button type=\"button\"><img alt=\"apple\" src=\"/blindWeb/img/free-icon-apple-logo-747.png\" width=24px> APP STORE</button>\r\n");
      out.write("            <button type=\"button\"><img alt=\"google\" src=\"/blindWeb/img/free-icon-google-play-1216729.png\" width=24px>GOOGLE PLAY</button>\r\n");
      out.write("        </div>\r\n");
      out.write("        \r\n");
      out.write("    </div>\r\n");
      out.write("    \r\n");
      out.write("</footer>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
