/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.94
 * Generated at: 2024-10-02 02:40:27 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class paging_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write(" \r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<table>\r\n");
      out.write("<tr>\r\n");
      out.write("<td></td>\r\n");
      out.write("<td></td>\r\n");
      out.write("<td></td>\r\n");
      out.write("<td></td>\r\n");
      out.write("<td></td>\r\n");
      out.write("<td></td>\r\n");
      out.write("<td></td>\r\n");
      out.write("</tr>\r\n");
      out.write(" \r\n");
      out.write("\r\n");
      out.write("<tr>\r\n");
      out.write("<td></td>\r\n");
      out.write("<td></td>\r\n");
      out.write("<td></td>\r\n");
      out.write("<td></td>\r\n");
      out.write("<td></td>\r\n");
      out.write("<td></td>\r\n");
      out.write("<td></td>\r\n");
      out.write("</tr>\r\n");
      out.write(" \r\n");
      out.write("</table>\r\n");

	 
	 int currentPage=1;   //현재페이지
	 if( request.getParameter("p") != null){
		 currentPage  = Integer.parseInt(request.getParameter("p"));			 
	 }
      
	 int totRecords =100;        //  총 레코드 수  , 임의 값 
	 int pageSize =4;            //페이지 사이즈  (데이터 건수 , 한 페이징 보이는 레코드 수, 목록 )
	 
	 int grpSize=5;             // 한 그룹에 5깨씩 보겟다 
	 
	 
	 int totalPage;             // 총 페이지수: 전체 페이수    =>	 6페이지 (현재의 경우)	
	 int currentGrp =0;  	    // 현재그룹
	 
	 
	 /* 페이징 예시   ,한 그룹의 size =5
	     1그룹=>  [1] [2] [3] [4] [5] [다음]
	     2그룹 => [이전] [6]  [7]  [8]  [9]  [10] [다음]
	     3그룹 => [이전] [11] [12] [13] [14] [15] [다음]  
	     4그룹 => [이전] [16] [17] [18] [19]  	 
	    		 
	   */
	   
	 
	 //총 페이지수 구하기
	 int reamin = totRecords  %  pageSize ;	 	
	 if( reamin ==0 )
		 totalPage = totRecords / pageSize;		  // 총레코드 / 페이지사이즈    31 /4 =>
	 else 
		 totalPage = totRecords / pageSize +1;	  // 7+1  =>총 8페이지   
  
	 
	 /* 현재페이지에 따른 현재그룹 구하기 
	   1. 현재페이지가 1그룹인지 2그룹인지 현재그룹 구하기     예) 현재페이지 6=>  현재그룹 2    how) 현재페이지 / 그룹사이즈   5/5=>1그룹  ,  6/5 =>1+1 =>2그룹 ,  11/5=>2+1 =>3그룹
	   2. 현재그룹을 이용하여 그룹의 시작번호 구하기          예) 현재그룹의 시작번호 6
	   3. 현재그룹을 이용하여 그룹의 마지막번호 구하기         예) 현재그룹의 마지막번호 10
	 
	  현재그룹의 시작번호
	  현재그룹의 끝번호
	 */
	 int remain2 = currentPage % grpSize;               // 나머지에 따라 현재그룹이 달라짐 
	 if( remain2 ==0 )
		 currentGrp  = currentPage  / grpSize ;        //  5/5 =>1  그룹 ,  10 /5 =>2   그룹  ,  15/5 =>3그룹 
		 
	 else 
		 currentGrp = currentPage  / grpSize  +1;      //  4 /5 => + 1 => 1번째 그룹 ,  7 /5 => 1 +1 => 2그룹   , 12/5 => 2+1  =>3그룹
	 
		 
	 int grpStartPage = ( currentGrp -1 ) * grpSize +1 ;  // 그룹의 시작번호     
	 int grpEndPage = currentGrp * grpSize;               // 그룹의 끝번호    
	 
	 /*
	    현재그룹이 정해지면                                                                                         1일경우                2일경우                3일경우
	    현재그룹의 시작번호  =  (현재그룹 -1) * 그룹사이즈 +1            1   (1-1)*5 +1        6 (2-1)*5 +1           11 (3-1)*5+1
	    현재그룹의 마지막번호 =  현재그룹 *그룹사이즈                     5    1*5              10 2*5                  15  3*5
	 
	 */
	 
	 
	 if( grpEndPage > totalPage){
		 grpEndPage = totalPage;    // 그룹의 끝번호   10 -> 9로 변경 , 그룹의 끝번호가 마지막페이지번호 크다면
	 }
	 
	 
	 //그룹의 시작번호에서 그룹의 마지막번호까지 반복문으로 출력  , 반복제어변수: index  
	 // index변수는 그룹의 시작번호 설정된다 . !!!!!
	 
	 int index = grpStartPage;
	 
	 if( currentGrp >1){	
	
      out.write("\r\n");
      out.write("	     <a href=\"paging.jsp?p=");
      out.print(index-1);
      out.write("\">[이전 ]</a>  \r\n");
      out.write("	 ");
}
	 
	 
	 while( index <= grpEndPage){		 
	 
      out.write("\r\n");
      out.write("		 <a href=\"/pagePrj/paging.jsp?p=");
      out.print(index);
      out.write("\">[  ");
      out.print(index );
      out.write(" ]</a> \r\n");
      out.write("        ");

		  index ++;
        
	 }
	 
	 if( grpEndPage < totalPage){
      out.write("	\r\n");
      out.write("		  <a href=\"/pagePrj/paging.jsp?p=");
      out.print(grpEndPage+1);
      out.write("\">[ 다음 ]</a>  \r\n");
      out.write("	");
 }
	
      out.write("\r\n");
      out.write("	\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
